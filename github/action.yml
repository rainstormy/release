name: Release / GitHub
description: >
  Creates a draft GitHub release from a full semantic version tag.
author: Steffen Diswal

inputs:
  changelog-path:
    description: >
      The location of a Markdown changelog file that contains the release notes
      in Keep a Changelog format.
    required: false
    default: ./CHANGELOG.md
  #
  gh-auth-token:
    description: >
      An access token for GitHub with scopes for `repo` and `read:org` in order
      to create a GitHub release.
    required: true
  #
  version:
    description: >
      A string that contains a semantic version number on the
      form `<major.minor.patch[-prerelease][+buildinfo]>`.
    required: true

runs:
  using: composite
  steps:
    # language=sh
    - run: |
        VERSION=$(echo "$RAW_VERSION" | grep --only-matching --extended-regexp '[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z.-]+)?(\+[0-9A-Za-z.-]+)?')

        if [[ -z "$GH_AUTH_TOKEN" ]]; then
          echo 'Input parameter `gh-auth-token` must be defined.'
          exit 2
        elif [[ -z "$VERSION" ]]; then
          echo 'Input parameter `version` must contain a semantic version number on the form `<major.minor.patch[-prerelease][+buildinfo]>`.'
          exit 2
        fi

        if [ -f "$CHANGELOG_PATH" ]; then
          # Extract the lines between the '## [$VERSION]' heading and the following '## [' heading, excluding the headings, covering the changes in the latest release.
          # Change '###' headings to '##' headings to make them more prominent in the release notes.
          # Replace newlines with spaces to undo the line wrapping and indentation in each list item (i.e. lines beginning with '- '), taking nested list items into account.
          RELEASE_NOTES=$(sed -n "/## \[$VERSION\]/,/^## \[/p;/^\[unreleased\]:/q" "$CHANGELOG_PATH" | sed '1d;$d' | awk '{if(/^[ \t]*$/){if(prev){print prev;prev=""};print "";next} if(/^### /){sub(/^### /,"## ")} if($0 ~ /^## /){if(prev) print prev; prev=$0; next} trimmed=$0; gsub(/^[ \t]+/,"",trimmed); if(trimmed ~ /^-/){if(prev) print prev; prev=$0} else {sub(/^[ \t]+/,""); prev=prev" "$0}} END{if(prev) print prev}')  
        else
          RELEASE_NOTES='This release was created automatically by GitHub Actions.'
        fi

        gh auth login --with-token <<< "$GH_AUTH_TOKEN"
        gh release create --draft --verify-tag --title "$VERSION" --notes "$RELEASE_NOTES" "v$VERSION"
      env:
        CHANGELOG_PATH: ${{ inputs.changelog-path }}
        GH_AUTH_TOKEN: ${{ inputs.gh-auth-token }}
        RAW_VERSION: ${{ inputs.version }}
      shell: bash
